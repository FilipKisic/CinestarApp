package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieTableModel;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.JTextComponent;

/**
 *
 * @author filip
 */
public class EditMovies extends javax.swing.JPanel {

    private static final String PICTURE_PATH = "assets/No_pic.png";
    private static final Random RANDOM = new Random();
    private static final String DIR = "assets";

    private static List<JTextComponent> validationFields;
    private static List<JLabel> errorLabels;
    private static Repository repository;
    private MovieTableModel movieTableModel;
    private Movie selectedMovie;
    public static List<Movie> movieList = new ArrayList<>();
    private final MainFrame mainFrame;
    private JTextComponent selectedTextComponent; 

    /**
     * Creates new form EditMovies
     */
    public EditMovies(MainFrame frame) {
        initComponents();
        initDragNDrop();
        this.mainFrame = frame;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbIcon = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        tfTitle = new javax.swing.JTextField();
        tfPublishedDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lbTitleError = new javax.swing.JLabel();
        lbPublishedDateError = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lbDescriptionError = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        lbOriginalTitleError = new javax.swing.JLabel();
        lbIconError = new javax.swing.JLabel();
        tfIconPath = new javax.swing.JTextField();
        btnImport = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        tfDirector = new javax.swing.JTextField();
        lbDirectorError = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        lbDurationError = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        tfGenre = new javax.swing.JTextField();
        lbGenreError = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        lbLinkError = new javax.swing.JLabel();
        tfStartDate = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        lbStartDateErrror = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnActorFrame = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1000, 900));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lbIcon.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel2.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        jLabel2.setText("Title:");

        tbMovies.setFont(new java.awt.Font("Segoe UI Semilight", 0, 12)); // NOI18N
        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbMovies);

        tfTitle.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        tfTitle.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                EditMovies.this.focusGained(evt);
            }
        });

        tfPublishedDate.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        tfPublishedDate.setName("PublishedDate"); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        jLabel3.setText("Published date:");

        lbTitleError.setFont(new java.awt.Font("Segoe UI Semilight", 1, 18)); // NOI18N
        lbTitleError.setForeground(new java.awt.Color(255, 0, 51));

        lbPublishedDateError.setFont(new java.awt.Font("Segoe UI Semilight", 1, 18)); // NOI18N
        lbPublishedDateError.setForeground(new java.awt.Color(255, 0, 51));

        jLabel5.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        jLabel5.setText("Description:");

        lbDescriptionError.setFont(new java.awt.Font("Segoe UI Semilight", 1, 18)); // NOI18N
        lbDescriptionError.setForeground(new java.awt.Color(255, 0, 51));

        taDescription.setColumns(20);
        taDescription.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane2.setViewportView(taDescription);

        jLabel7.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        jLabel7.setText("Original title:");

        tfOriginalTitle.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N

        lbOriginalTitleError.setFont(new java.awt.Font("Segoe UI Semilight", 1, 18)); // NOI18N
        lbOriginalTitleError.setForeground(new java.awt.Color(255, 0, 51));

        lbIconError.setFont(new java.awt.Font("Segoe UI Semilight", 1, 18)); // NOI18N
        lbIconError.setForeground(new java.awt.Color(255, 0, 51));

        tfIconPath.setEditable(false);
        tfIconPath.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N

        btnImport.setFont(new java.awt.Font("Segoe UI Semilight", 1, 12)); // NOI18N
        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        jLabel9.setText("Director:");

        tfDirector.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N

        lbDirectorError.setFont(new java.awt.Font("Segoe UI Semilight", 1, 18)); // NOI18N
        lbDirectorError.setForeground(new java.awt.Color(255, 0, 51));

        tfDuration.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N

        lbDurationError.setFont(new java.awt.Font("Segoe UI Semilight", 1, 18)); // NOI18N
        lbDurationError.setForeground(new java.awt.Color(255, 0, 51));

        jLabel12.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        jLabel12.setText("Genre:");

        tfGenre.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N

        lbGenreError.setFont(new java.awt.Font("Segoe UI Semilight", 1, 18)); // NOI18N
        lbGenreError.setForeground(new java.awt.Color(255, 0, 51));

        tfLink.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        jLabel8.setText("Link:");

        lbLinkError.setFont(new java.awt.Font("Segoe UI Semilight", 1, 18)); // NOI18N
        lbLinkError.setForeground(new java.awt.Color(255, 0, 51));

        tfStartDate.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        tfStartDate.setName("StartDate"); // NOI18N

        jLabel13.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        jLabel13.setText("Start date:");

        lbStartDateErrror.setFont(new java.awt.Font("Segoe UI Semilight", 1, 18)); // NOI18N
        lbStartDateErrror.setForeground(new java.awt.Color(255, 0, 51));

        btnAdd.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnActorFrame.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        btnActorFrame.setText("Manage actors");
        btnActorFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActorFrameActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        jLabel1.setText("Duration: ");

        btnClear.setFont(new java.awt.Font("Segoe UI Semilight", 1, 14)); // NOI18N
        btnClear.setText("Clear selection");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfTitle)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(tfPublishedDate)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbIconError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbPublishedDateError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbStartDateErrror, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnActorFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(24, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(tfIconPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnImport)
                                .addGap(22, 22, 22))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addGap(21, 21, 21))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(tfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lbDirectorError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lbOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lbDirectorError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbStartDateErrror, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnActorFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfIconPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnImport)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lbIconError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(237, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        initSetup();
    }//GEN-LAST:event_formComponentShown

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        showMovie();
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        try {
            Optional<File> uploadFile = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
            if (!uploadFile.isPresent()) {
                return;
            }
              tfIconPath.setText(uploadFile.get().getAbsolutePath());
              setIcon(lbIcon, uploadFile.get());
        } catch (Exception e) {
            MessageUtils.showErrorMessage("Error", "Cannot upload the image.");
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (formValid() && selectedMovie == null) {
            try {
                String iconPath = uploadIcon();
                Movie movie;
                movie = new Movie(tfTitle.getText().trim(),
                        LocalDateTime.parse(tfPublishedDate.getText().trim(), Movie.DATE_TIME_FORMATTER),
                        taDescription.getText().trim(),
                        tfOriginalTitle.getText().trim(),
                        createNewDirector(tfDirector.getText().trim()),
                        Integer.parseInt(tfDuration.getText().trim()),
                        tfGenre.getText().trim(),
                        iconPath,
                        tfLink.getText().trim(),
                        LocalDateTime.parse(tfStartDate.getText().trim(), Movie.DATE_TIME_FORMATTER),
                        new ArrayList<>(Collections.<Actor>emptyList()));
                repository.createMovie(movie);
                movieList.add(movie);
                clearForm();
                movieTableModel.setMovies(repository.selectMovies());
                tbMovies.setModel(movieTableModel);
            } catch (Exception e) {
                MessageUtils.showErrorMessage("Error", "Cannot add new movie");
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Error", "Select article first.");
            return;
        }
        if (formValid()) {
            try {
                if (selectedMovie.getPicturePath() == null || !tfIconPath.getText().trim().equals(selectedMovie.getPicturePath())) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                    String iconPath = uploadIcon();
                    selectedMovie.setPicturePath(iconPath);
                }
                selectedMovie.setTitle(tfTitle.getText().trim());
                selectedMovie.setPublishDate(LocalDateTime.parse(tfPublishedDate.getText().trim(), Movie.DATE_TIME_FORMATTER));
                selectedMovie.setDescription(taDescription.getText().trim());
                selectedMovie.setOriginalTitle(tfOriginalTitle.getText().trim());
                selectedMovie.setDirector(createNewDirector(tfDirector.getText().trim()));
                selectedMovie.setDuration(Integer.parseInt(tfDuration.getText().trim()));
                selectedMovie.setGenre(tfGenre.getText().trim());
                repository.updateMovie(selectedMovie.getId(), selectedMovie);
                movieTableModel.setMovies(repository.selectMovies());
                clearForm();
            } catch (Exception e) {
                MessageUtils.showErrorMessage("Error", "Cannot update the movie.");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Information", "Select movie first");
            return;
        }
        if (MessageUtils.showConfirmDialog("Delete movie", "Delete " + selectedMovie.getOriginalTitle() + "?") == JOptionPane.YES_OPTION) {
            try {
                Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                repository.UnlinkMovieWithActors(selectedMovie.getId());
                repository.deleteMovie(selectedMovie.getId());
                movieTableModel.setMovies(repository.selectMovies());
                clearForm();
            } catch (Exception e) {
                MessageUtils.showErrorMessage("Error", "Cannot delete the movie.");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnActorFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActorFrameActionPerformed
        ActorManager am = new ActorManager(selectedMovie, repository);
        am.setVisible(true);
    }//GEN-LAST:event_btnActorFrameActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        selectedMovie = null;
        btnActorFrame.setEnabled(false);
        try {
            clearForm();
        } catch (URISyntaxException ex) {
            MessageUtils.showErrorMessage("Error", "Cannot find default image.");
        }
    }//GEN-LAST:event_btnClearActionPerformed

    private void focusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_focusGained
        selectedTextComponent = (JTextComponent) evt.getSource();
        handleMenu();
    }//GEN-LAST:event_focusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActorFrame;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JLabel lbDirectorError;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbGenreError;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JLabel lbIconError;
    private javax.swing.JLabel lbLinkError;
    private javax.swing.JLabel lbOriginalTitleError;
    private javax.swing.JLabel lbPublishedDateError;
    private javax.swing.JLabel lbStartDateErrror;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfDirector;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfGenre;
    private javax.swing.JTextField tfIconPath;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfStartDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void initSetup() {
        try {
            initFields();
            initRepository();
            initTables();
            setIcon(lbIcon, getPicture());
            btnActorFrame.setEnabled(false);
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("initSetup()", "Unrecoverable error...");
            System.exit(1);
        }
    }

    private void initFields() {
        validationFields = Arrays.asList(tfTitle, tfPublishedDate, taDescription, tfIconPath, tfOriginalTitle, tfDirector, tfDuration, tfGenre, tfLink, tfStartDate);
        errorLabels = Arrays.asList(lbTitleError, lbPublishedDateError, lbDescriptionError, lbIconError, lbOriginalTitleError, lbDirectorError, lbDurationError, lbGenreError, lbLinkError, lbStartDateErrror);
    }

    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }

    private void initTables() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(20);
        List<Movie> movies = repository.selectMovies();
        if (movies.size() > 0) {
            movieTableModel = new MovieTableModel(movies);
            movieList.addAll(movies);
            tbMovies.setModel(movieTableModel);
        } else {
            DefaultTableModel model = new DefaultTableModel();
            model.setRowCount(0);
            tbMovies.setModel(model);
        }
    }

    private void showMovie() {
        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) movieTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> movie = repository.selectMovie(selectedMovieId);
            if (movie.isPresent()) {
                selectedMovie = movie.get();
                showMovieData(selectedMovie);
                btnActorFrame.setEnabled(true);
            }
            tfTitle.requestFocus();
        } catch (Exception e) {
            MessageUtils.showErrorMessage("showMovie()", "Could not load selected movie.");
        }
    }

    private void showMovieData(Movie selectedMovie) throws Exception {
        tfTitle.setText(selectedMovie.getTitle());
        tfPublishedDate.setText(selectedMovie.getPublishDate().format(Movie.DATE_TIME_FORMATTER));
        taDescription.setText(selectedMovie.getDescription());
        tfOriginalTitle.setText(selectedMovie.getOriginalTitle());
        tfDirector.setText(selectedMovie.getDirector().toString());
        tfDuration.setText(String.valueOf(selectedMovie.getDuration()));
        tfGenre.setText(selectedMovie.getGenre());
        tfLink.setText(selectedMovie.getLink());
        tfStartDate.setText(selectedMovie.getStartDate().format(Movie.DATE_TIME_FORMATTER));

        if (selectedMovie.getPicturePath() != null && Files.exists(Paths.get(selectedMovie.getPicturePath()))) {
            tfIconPath.setText(selectedMovie.getPicturePath());
            setIcon(lbIcon, new File(selectedMovie.getPicturePath()));
        } else {
            setIcon(lbIcon, getPicture());
            tfIconPath.setText("");
        }
    }

    private void setIcon(JLabel lbIcon, File file) {
        try {
            System.out.println(file.getAbsolutePath());
            lbIcon.setIcon(IconUtils.createIcon(file.getAbsolutePath(), lbIcon.getWidth(), lbIcon.getHeight()));
        } catch (Exception e) {
            MessageUtils.showErrorMessage("setIcon()", "Could not upload the image");
        }
    }

    private boolean formValid() {
        boolean isValid = true;
        for (int i = 0; i < validationFields.size(); i++) {
            isValid &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");

            if ("PublishedDate".equals(validationFields.get(i).getText().trim()) || "StartDate".equals(validationFields.get(i).getText().trim())) {
                try {
                    LocalDateTime.parse(validationFields.get(i).getText().trim(), Movie.DATE_TIME_FORMATTER);
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    isValid = false;
                    errorLabels.get(i).setText("X");
                }
            }
        }
        return isValid;
    }

    private String uploadIcon() throws IOException {
        String iconUrl = tfIconPath.getText();
        String ext = iconUrl.substring(iconUrl.lastIndexOf("."));
        String iconName = Math.abs(RANDOM.nextInt()) + ext;
        String iconPath = DIR + File.separator + iconName;

        FileUtils.copy(iconUrl, iconPath);
        return iconPath;
    }

    private Director createNewDirector(String data) {
        String[] details = data.trim().split(" ");
        return new Director(details[0], details[1]);
    }

    private void clearForm() throws URISyntaxException {
        validationFields.forEach(f -> f.setText(""));
        errorLabels.forEach(l -> l.setText(""));
        setIcon(lbIcon, getPicture());
        selectedMovie = null;
    }
    
    private void initDragNDrop() {
        tfTitle.setDragEnabled(true);
        tfOriginalTitle.setDragEnabled(true);
        tfTitle.setTransferHandler(new TransferHandler("text"));
        tfOriginalTitle.setTransferHandler(new TransferHandler("text"));
    }

    private void handleMenu() {
        JMenu menuEdit = mainFrame.getMenuEdit();
        menuEdit.removeAll();
        ActionMap actionMap = selectedTextComponent.getActionMap();
        menuEdit.add(createMenuItem(
                actionMap.get(DefaultEditorKit.cutAction),
                "Cut",
                javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK)));
        menuEdit.add(createMenuItem(
                actionMap.get(DefaultEditorKit.copyAction),
                "Copy",
                javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK)));
        menuEdit.add(createMenuItem(
                actionMap.get(DefaultEditorKit.pasteAction),
                "Paste",
                javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK)));
        menuEdit.addSeparator();
        menuEdit.add(createMenuItem(
                actionMap.get(DefaultEditorKit.selectAllAction),
                "SelectAll",
                javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK)));
    }

    private JMenuItem createMenuItem(Action action, String text, KeyStroke keyStroke) {
        JMenuItem item = new JMenuItem();
        item.setAction(action);
        item.setText(text);
        item.setAccelerator(keyStroke);
        return item;
    }
    
    private File getPicture() throws URISyntaxException{
        URL res = getClass().getClassLoader().getResource(PICTURE_PATH);
        return Paths.get(res.toURI()).toFile();
    }
}
